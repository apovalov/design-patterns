import UIKit

// Паттерн - это опыт, идея, которая может быть применена в любом языке программирования.
//
// - Стандартные решения стандртных задач ООП.
// - Лучшие решения, которые были разработаны многолетним опытом, которые помогают сохранить ресурсы.
// - Позволяют экономить время в будущем.
// - Помогают соблюдать типовые решения, приянтые в компании, для типовых ситуаций.


// Пораждающий - паттерн который работает с инициализацией объекта.
// Структурный - работает с интерефейсами, преобразует их.
// Поведенческий - работают, чтобы обеспечить гибкое взаимодействие между объектами

// 1.Strategy - поведенческий - использование других классов в качестве полей других классов, через протоколы, что позволяет присвоить переменной экземпляры разных классов, поддписанных на протокол.
// 2.Observer - поведенческий
// 3.Decorator - структурный
// 4.Simple Factory - порождающий
// 5.Factory method - порождающий
// 6.Abstract factory - порждающий
// 7.Singletone - порождающий
// 8.Command - поведенческий
// 9.Adapter - структурный
// 10.Facade - структурный
// 11.Tampltate method - поведенческий
// 12.Iterator - поведенческий
// 13.Composite - струкрный
// 14.State - поведенческий
// 15.Proxy - структурный
// 16.Builder - порождающий
// 17.Chain of responsibility - поведенческий

// 18.Prototype - порождающий
// 19.Bridge - структурный
// 20.Flyweight - структурный
// 21.Mediator(посредник) - поведенческий
// 22.Memento(снимок) - поведенческий
// 23.Visitor - поведенческий


//MARK: - Observer


//MARK: - Deecorator


//MARK: - Simple Factory


//MARK: - Factroy Method


//MARK: - Abstarct Factory


//MARK: - Singletone


//MARK: - Command


//MARK: - Adapter


//MARK: - Facade


//MARK: - Tampletate method


//MARK: - Iterator


//MARK: - Composite


//MARK: - State


//MARK: - Proxy


//MARK: - Builder


//MARK: - Chain of responsibility
